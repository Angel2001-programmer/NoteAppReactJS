{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Angel\\\\OneDrive\\\\Documents\\\\React JS\\\\React-Investments\\\\src\\\\App.js\";\nimport ResultTable from './componenets/resultTable';\nimport FormCalculator from './componenets/FormCalculator';\nimport logo from './assets/investment-calculator-logo.png';\nimport Header from './componenets/Header';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const calculateHandler = userInput => {\n    // const [yearlyData, setYearlyData] = useState([]); // per-year results\n    // const [isShown, setisShown] = useState(false); \n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    yearlyDate; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    // do something with yearlyData ...\n    const ResultTable = () => {\n      if (isShown != false) {\n        /*#__PURE__*/_jsxDEV(ResultTable, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 5\n        }, this);\n      } else {\n        /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 5\n        }, this);\n      }\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      logo: logo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormCalculator, {\n      isShown: isShown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), ResultTable]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ResultTable","FormCalculator","logo","Header","useState","jsxDEV","_jsxDEV","App","calculateHandler","userInput","yearlyDate","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","yearlyData","push","year","savingsEndOfYear","isShown","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["C:/Users/Angel/OneDrive/Documents/React JS/React-Investments/src/App.js"],"sourcesContent":["import ResultTable from './componenets/resultTable';\nimport FormCalculator from './componenets/FormCalculator';\nimport logo from './assets/investment-calculator-logo.png';\nimport Header from './componenets/Header';\nimport { useState } from 'react';\n\nfunction App() {\n  const calculateHandler = (userInput) => {\n    // const [yearlyData, setYearlyData] = useState([]); // per-year results\n    // const [isShown, setisShown] = useState(false); \n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    yearlyDate// per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n\n    // do something with yearlyData ...\nconst ResultTable = () => {\n  if(isShown != false){\n    <ResultTable/>\n  } else {\n    <div></div>\n  }\n}\n  };\n\n  return (\n    <div>\n      <Header logo={logo}/>\n      <FormCalculator isShown={isShown}/>\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n      {ResultTable}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,WAAW,MAAM,2BAA2B;AACnD,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,IAAI,MAAM,yCAAyC;AAC1D,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;IACtC;IACA;IACA;IACA;;IAEAC,UAAU;;IAEV,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDK,UAAU,CAACC,IAAI,CAAC;QACd;QACAC,IAAI,EAAEJ,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BI,gBAAgB,EAAET,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;;IAEA;IACJ,MAAMZ,WAAW,GAAGA,CAAA,KAAM;MACxB,IAAGqB,OAAO,IAAI,KAAK,EAAC;QAClB,aAAAf,OAAA,CAACN,WAAW;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAChB,CAAC,MAAM;QACL,aAAAnB,OAAA;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAU,CAAC;MACb;IACF,CAAC;EACC,CAAC;EAED,oBACEnB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA,CAACH,MAAM;MAACD,IAAI,EAAEA;IAAK;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACrBnB,OAAA,CAACL,cAAc;MAACoB,OAAO,EAAEA;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EAGlCzB,WAAW;EAAA;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV;AAACE,EAAA,GA9CQpB,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}