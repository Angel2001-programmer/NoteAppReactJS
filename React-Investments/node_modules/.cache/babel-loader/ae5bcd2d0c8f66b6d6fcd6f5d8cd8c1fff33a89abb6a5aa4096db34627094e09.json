{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Angel\\\\OneDrive\\\\Documents\\\\React JS\\\\React-Investments\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport ResultTable from './componenets/resultTable';\nimport FormCalculator from './componenets/FormCalculator';\nimport logo from './assets/investment-calculator-logo.png';\nimport Header from './componenets/Header';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const calculateHandler = userInput => {\n    // const [yearlyData, setYearlyData] = useState([]); // per-year results\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    let yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n  const [isShown, setIsShown] = useState(false);\n  if (isShown != false) {\n    /*#__PURE__*/_jsxDEV(ResultTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, this);\n  } else {}\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      logo: logo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormCalculator, {\n      Shown: isShown,\n      onChangeShown: setIsShown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), isShown ? /*#__PURE__*/_jsxDEV(ResultTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"errorTitle\",\n      children: \"No results recorded.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 35\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AfL4AMulNN2iutG1qDR77gnp7oc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ResultTable","FormCalculator","logo","Header","useState","jsxDEV","_jsxDEV","App","_s","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","isShown","setIsShown","fileName","_jsxFileName","lineNumber","columnNumber","children","Shown","onChangeShown","className","_c","$RefreshReg$"],"sources":["C:/Users/Angel/OneDrive/Documents/React JS/React-Investments/src/App.js"],"sourcesContent":["import ResultTable from './componenets/resultTable';\nimport FormCalculator from './componenets/FormCalculator';\nimport logo from './assets/investment-calculator-logo.png';\nimport Header from './componenets/Header';\nimport { useState } from 'react';\n\nfunction App() {\n  const calculateHandler = (userInput) => {\n    // const [yearlyData, setYearlyData] = useState([]); // per-year results\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    let yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n    \n    \n    // do something with yearlyData ...\n  };\n  const [isShown, setIsShown] = useState(false); \n  if(isShown != false){\n    <ResultTable/>\n  } else {\n    \n  }\n\n  return (\n    <div>\n      <Header logo={logo}/>\n      <FormCalculator Shown={isShown} onChangeShown={setIsShown}/>\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n      {isShown ? <ResultTable/> : <h1 className='errorTitle'>No results recorded.</h1>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,WAAW,MAAM,2BAA2B;AACnD,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,IAAI,MAAM,yCAAyC;AAC1D,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;IACtC;IACA;IACA;;IAEA,IAAIC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAErB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;;IAGA;EACF,CAAC;;EACD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAC7C,IAAGiB,OAAO,IAAI,KAAK,EAAC;IAClB,aAAAf,OAAA,CAACN,WAAW;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAChB,CAAC,MAAM,CAEP;EAEA,oBACEpB,OAAA;IAAAqB,QAAA,gBACErB,OAAA,CAACH,MAAM;MAACD,IAAI,EAAEA;IAAK;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACrBpB,OAAA,CAACL,cAAc;MAAC2B,KAAK,EAAEP,OAAQ;MAACQ,aAAa,EAAEP;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EAG3DL,OAAO,gBAAGf,OAAA,CAACN,WAAW;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,gBAAGpB,OAAA;MAAIwB,SAAS,EAAC,YAAY;MAAAH,QAAA,EAAC;IAAoB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7E,CAAC;AAEV;AAAClB,EAAA,CA7CQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AA+CZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}